export declare type MapFn<TItem, TResult> = (item: TItem) => TResult;
export declare type PredicateFn<TItem> = (item: TItem) => boolean;
export declare type CallbackFn<TItem> = (item: TItem) => void;
export declare type KeySelectorFn<TItem, TKey> = (item: TItem) => TKey;
export declare type ReduceCallbackFn<TPrevious, TCurrent> = (previousValue: TPrevious, currentValue: TCurrent) => TPrevious;
export declare type ComparerFn<TItem> = (a: TItem, b: TItem) => number;
export declare type IteratorCreatorFn<TResult> = () => Iterator<TResult>;
export declare type ComparePredicate<TItem> = (a: TItem, b: TItem) => boolean;
export interface Grouping<TKey, TElement> {
    key: TKey;
    items: TElement[];
}
export interface StringKeyedObject<T> {
    [index: string]: T;
}
export interface NumberKeyedObject<T> {
    [index: number]: T;
}
